==== Integer Overflow  ====
Type: Warning
Contract: Benchmark
Function name: deposit()
PC address: 407
A possible integer overflow exists in the function `deposit()`.
The addition or multiplication may result in a value higher than the maximum representable integer.
--------------------
In file: /home/vagrant/host/benchmarks/./reentrancy_dao_fixed.sol:18

credit[msg.sender] += msg.value

--------------------

==== Integer Overflow  ====
Type: Warning
Contract: Benchmark
Function name: deposit()
PC address: 423
A possible integer overflow exists in the function `deposit()`.
The addition or multiplication may result in a value higher than the maximum representable integer.
--------------------
In file: /home/vagrant/host/benchmarks/./reentrancy_dao_fixed.sol:19

balance += msg.value

--------------------

==== Integer Underflow ====
Type: Warning
Contract: Benchmark
Function name: withdrawAll()
PC address: 200
A possible integer underflow exists in the function `withdrawAll()`.
The subtraction may result in a value < 0.
--------------------
In file: /home/vagrant/host/benchmarks/./reentrancy_dao_fixed.sol:10

balance -= oCredit

--------------------

==== Message call to external contract ====
Type: Warning
Contract: Benchmark
Function name: withdrawAll()
PC address: 315
This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.
--------------------
In file: /home/vagrant/host/benchmarks/./reentrancy_dao_fixed.sol:12

msg.sender.call.value(oCredit)()

--------------------


